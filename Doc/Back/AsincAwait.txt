Если в теле функции есть "await", то в заголовке обязательно "async".

Если таск возвращает таск, то можно не писать "async/await"

Было:
    public [async] Task DeleteCommentsByChatIdAsync(Guid id)
    {
        [await] _repository.DeleteCommentsByChatIdAsync(id);
    }
Стало:
    public Task DeleteCommentsByChatIdAsync(Guid id)
    {
        _repository.DeleteCommentsByChatIdAsync(id);
    }


https://metanit.com/sharp/tutorial/13.3.php
Асинхронность позволяет вынести отдельные задачи из основного потока в специальные асинхронные методы или блоки кода. Особенно это актуально в графических программах, где продолжительные задачи могу блокировать интерфейс пользователя. И чтобы этого не произошло, нужно задействовать асинхронность. Также асинхронность несет выгоды в веб-приложениях при обработке запросов от пользователей, при обращении к базам данных или сетевым ресурсам. При больших запросах к базе данных асинхронный метод просто уснет на время, пока не получит данные от БД, а основной поток сможет продолжить свою работу. В синхронном же приложении, если бы код получения данных находился в основном потоке, этот поток просто бы блокировался на время получения данных.

Асинхонный метод обладает следующими признаками:
- в заголовке метода используется модификатор async;
- метод содержит одно или несколько выражений await;
- в качестве возвращаемого типа используется один из следующих:
	void
	Task
	Task<T>
	ValueTask<T>

Асинхронный метод, как и обычный, может использовать любое количество параметров или не использовать их вообще. Однако асинхронный метод не может определять параметры с модификаторами out и ref.

Также стоит отметить, что слово "async", которое указывается в определении метода, не делает автоматически метод асинхронным. Оно лишь указывает, что данный метод может содержать одно или несколько выражений "await".

https://stackoverflow.com/questions/14455293/how-and-when-to-use-async-and-await
Example
Console.WriteLine(DateTime.Now);

// This block takes 1 second to run because all
// 5 tasks are running simultaneously
{
    var a = Task.Delay(1000);
    var b = Task.Delay(1000);
    var c = Task.Delay(1000);
    var d = Task.Delay(1000);
    var e = Task.Delay(1000);

    await a;
    await b;
    await c;
    await d;
    await e;
}

Console.WriteLine(DateTime.Now);

// This block takes 5 seconds to run because each "await"
// pauses the code until the task finishes
{
    await Task.Delay(1000);
    await Task.Delay(1000);
    await Task.Delay(1000);
    await Task.Delay(1000);
    await Task.Delay(1000);
}
Console.WriteLine(DateTime.Now);
OUTPUT:

5/24/2017 2:22:50 PM
5/24/2017 2:22:51 PM (First block took 1 second)
5/24/2017 2:22:56 PM (Second block took 5 seconds)