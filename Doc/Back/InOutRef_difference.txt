https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/keywords/reference-types

В C# существуют две разновидности типов: ссылочные типы и типы значений. 
В переменных ссылочных типов хранятся ссылки на их данные (объекты), 
а переменные типа значений содержат свои данные непосредственно. 
Две переменные ссылочного типа могут ссылаться на один и тот же объект, 
поэтому операции над одной переменной могут затрагивать объект, 
на который ссылается другая переменная. 
Каждая переменная типа значения имеет собственную копию данных, 
и операции над одной переменной не могут затрагивать другую 
(за исключением переменных параметров in, ref и out).


https://www.pluralsight.com/guides/csharp-in-out-ref-parameters

Method parameters have modifiers available to change the desired outcome of how the parameter is treated. 
Each method has a specific use case:
    - REF is used to state that the parameter passed MAY be modified by the method.
    - IN is used to state that the parameter passed CANNOT be modified by the method.
    - OUT is used to state that the parameter passed MUST be modified by the method.

Both the REF and IN require the parameter to have been initialized before being passed to a method. 
The OUT modifier does not require this and is typically not initialized prior to being used in a method.

It's important to note that in, out, and ref cannot be used in methods with the async modifier. 
You can use them in synchronous methods that return a task, though.
You cannot use them in iterator methods that have a yield return or yield break either.

When overloading a method in C#, using a modifier will be considered a different method 
signature than not using a modifier at all. 
You cannot overload a method if the only difference 
between methods is the type of modifier used. 
This will result in a compile error.


https://www.geeksforgeeks.org/difference-between-ref-and-out-keywords-in-c-sharp/

**********************
OUT
**********************


The OUT is a keyword in C# which is used for the passing the arguments to methods as a reference type. It is generally used when a method returns multiple values. The out parameter does not pass the property.

Example :


// C# program to illustrate the
// concept of OUT parameter
using System;
  
class GFG {
  
    // Main method
    static public void Main()
    {
  
        // Declaring variable
        // without assigning value
        int G;
  
        // Pass variable G to the method
        // using out keyword
        Sum(out G);
  
        // Display the value G
        Console.WriteLine("The sum of" + 
                " the value is: {0}", G);
    }
  
    // Method in which out parameter is passed
    // and this method returns the value of
    // the passed parameter
    public static void Sum(out int G)
    {
        G = 80;
        G += G;
    }
}
Output:

The sum of the value is: 160


**********************
REF
**********************

The REF is a keyword in C# which is used for the passing the arguments by a reference. Or we can say that if any changes made in this argument in the method will reflect in that variable when the control return to the calling method. The REF parameter does not pass the property.

Example:


// C# program to illustrate the
// concept of ref parameter
using System;
  
class GFG {
  
    // Main Method
    public static void Main()
    {
  
        // Assign string value
        string str = "Geek";
  
        // Pass as a reference parameter
        SetValue(ref str);
  
        // Display the given string
        Console.WriteLine(str);
    }
  
    static void SetValue(ref string str1)
    {
  
        // Check parameter value
        if (str1 == "Geek") {
            Console.WriteLine("Hello!!Geek");
        }
  
        // Assign the new value
        // of the parameter
        str1 = "GeeksforGeeks";
    }
}
Output:

Hello!!Geek
GeeksforGeeks






**********************
Difference between REF and OUT keywords
**********************

REF: It is necessary the parameters should initialize before it pass to REF.	
OUT: It is not necessary to initialize parameters before it pass to OUT.

REF: It is not necessary to initialize the value of a parameter before returning to the calling method.	
OUT: It is necessary to initialize the value of a parameter before returning to the calling method.

REF: The passing of value through REF parameter is useful when the called method also need to change the value of passed parameter.
OUT: The declaring of parameter through OUT parameter is useful when a method return multiple values.

REF: When REF keyword is used the data may pass in bi-directional.
OUT: When OUT keyword is used the data only passed in unidirectional.

Note: Both REF and OUT parameter treated same at compile-time but different at run-time.
