#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.


##################################################
# Docker build stage: "base"
##################################################

# Задаёт базовый образ и идентификатор текущего этапа сборки
FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base

# Задаёт текущую рабочую директорию для следующей инструкции
WORKDIR /app

# Открывает порты
EXPOSE 80
EXPOSE 443


##################################################
# Docker build stage: "build"
##################################################

# Задаёт базовый образ и идентификатор текущего этапа сборки
FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build

# Задаёт текущую рабочую директорию для следующей инструкции
WORKDIR /src

# Копирует указанные локальные файлы в указанные папки образа
COPY ["src/Accounts/Hosts/Accounts.Api/Accounts.Api.csproj", "src/Accounts/Hosts/Accounts.Api/"]
COPY ["src/Accounts/Infrastructure/Accounts.DataAccess/Accounts.DataAccess.csproj", "src/Accounts/Infrastructure/Accounts.DataAccess/"]
COPY ["src/Accounts/Domain/Accounts.Domain/Accounts.Domain.csproj", "src/Accounts/Domain/Accounts.Domain/"]
COPY ["src/Accounts/Application/Accounts.Application/Accounts.AppServices.csproj", "src/Accounts/Application/Accounts.Application/"]
COPY ["src/Accounts/Contracts/Accounts.Contracts/Accounts.Contracts.csproj", "src/Accounts/Contracts/Accounts.Contracts/"]
COPY ["src/Advertisements/Contracts/Advertisements.Contracts/Advertisements.Contracts.csproj", "src/Advertisements/Contracts/Advertisements.Contracts/"]
COPY ["src/UserFiles/Contracts/UserFiles.Contracts/UserFiles.Contracts.csproj", "src/UserFiles/Contracts/UserFiles.Contracts/"]
COPY ["src/Accounts/Infrastructure/Accounts.Mapper/Accounts.MapsterMapper.csproj", "src/Accounts/Infrastructure/Accounts.Mapper/"]

# Выполняет команду и создаёт слой образа
RUN dotnet restore "src/Accounts/Hosts/Accounts.Api/Accounts.Api.csproj"

# Копирует файлы и папки из локального контекста сборки и 
# добавляет их в текущую рабочую директорию образа
COPY . .

# Задаёт текущую рабочую директорию для следующей инструкции
WORKDIR "/src/src/Accounts/Hosts/Accounts.Api"

# Выполняет команду и создаёт слой образа
# https://benkyriakou.com/posts/docker-args-empty
ARG MODE
RUN dotnet build "Accounts.Api.csproj" -c $MODE -o /app/build


##################################################
# Docker build stage: "publish"
##################################################

# Задаёт базовый образ и идентификатор текущего этапа сборки
FROM build AS publish

# Выполняет команду и создаёт слой образа
# https://benkyriakou.com/posts/docker-args-empty
ARG MODE
RUN dotnet publish "Accounts.Api.csproj" -c $MODE -o /app/publish


##################################################
# Docker build stage: "final"
##################################################

# Задаёт базовый образ и идентификатор текущего этапа сборки
FROM base AS final

# Задаёт текущую рабочую директорию для следующей инструкции
WORKDIR /app

# You can use the "COPY --from" instruction to copy from a separate image
# https://docs.docker.com/build/building/multi-stage/
COPY --from=publish /app/publish .

# Предоставляет команду с аргументами для вызова во время 
# выполнения контейнера. Аргументы не переопределяются.
# Эта инструкция выполняется при запуске контейнера.
# An ENTRYPOINT allows you to configure a container that will run as an executable.
# В отличии от CMD, исполняемый файл заранее определен.
# https://docs.docker.com/engine/reference/builder/#entrypoint
# https://habr.com/ru/company/southbridge/blog/329138/
# ENTRYPOINT ["cmd", "arg1", "arg2", ..., "arg..."]
ENTRYPOINT ["dotnet", "Accounts.Api.dll"]  # "exec" format
