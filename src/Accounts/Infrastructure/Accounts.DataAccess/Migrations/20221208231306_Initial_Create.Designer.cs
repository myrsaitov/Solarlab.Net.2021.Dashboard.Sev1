// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sev1.Accounts.DataAccess;

namespace Accounts.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221208231306_Initial_Create")]
    partial class Initial_Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FavoriteAdvertisementUser", b =>
                {
                    b.Property<string>("FavoriteAdvertisementsId")
                        .HasColumnType("text");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("FavoriteAdvertisementsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FavoriteAdvertisementUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "cc836c4d-a3dd-4434-92f3-f45a9ed19dd3",
                            ConcurrencyStamp = "1e7ea002-2501-47e5-b5f7-4a21a40f28e8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c373fe1b-9e38-498b-9729-6c719222b00d",
                            ConcurrencyStamp = "76a944c8-b598-4446-ad4b-251110759a08",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "589a1f42-d43c-4315-8e02-432f64e02bc0",
                            ConcurrencyStamp = "435a6a18-75d6-4512-bb18-6d5bcd1acc40",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "757d5290-d036-4757-85ae-827b59e92cd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30b6f92a-c25d-469c-93b3-74a39a62681c",
                            Email = "administrator@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@MAIL.RU",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEHbA59k6R9CidRWBBLl1cQw/jGM6Tv6jjBVzOI9+aSIweJFWDQmSrZv2iDwqq7K1vQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a85197a1-e5e1-428c-a909-968776bf78f8",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "a0d74199-2ad5-4d2f-a184-eb52f5bf9094",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84fa14dd-e722-49d2-b6a1-63405dc52b27",
                            Email = "moderator@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@MAIL.RU",
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEO/USzQKZENxDHEECjp3n1Mt9DaMQDFXj2dQIo1C03Thc5a7at5rI4zGS/M05eU2RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5a653ba-8a03-447a-8895-778989d06384",
                            TwoFactorEnabled = false,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = "64dbb199-0a95-4f1a-afcf-10cc827fd3c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc119491-4d98-4cbb-a1c3-cc1904fd4a98",
                            Email = "user1@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@MAIL.RU",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEPQ5p8yryXe2TWs1fxIpgAhhRs1ANxbiAHQEDeh6sI3SptpLc4mSEeRG1CZLoQSdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52e27e73-3a71-4e1e-80db-d0661d77b2a3",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "54b1ff98-6b5f-4c5e-97a9-747095e1f5dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "040d3204-408b-49a5-9fad-52d56396530f",
                            Email = "user2@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@MAIL.RU",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEEv5UdqFzWn9LiCZ7/XMMuj8ZwfGpqqqNTVNhEnncn6+FWL1Y5ititIvl7Uvzf0pmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0a65d52-0fc1-4a69-a9bd-6e076df2525a",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "c191e5f8-bf5b-40a9-9ab6-4d08704e373b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1359c92-6c45-421f-ac2e-4002c54435d1",
                            Email = "user3@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@MAIL.RU",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEA+xTjhdOyThf6UgHbA1bS7D0RHka1Nb5KD5/7oBsG1H3Ab1kzKMfe09d6E1IZNgdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1b366e0-07b5-42c9-95d1-ec8699d02713",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "09c529c8-e798-44ac-9eac-e0150182fa4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01aae025-18d1-43c4-9ead-0e32d6613f71",
                            Email = "user4@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@MAIL.RU",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEE5zoSeEk/UEjRtlswW+CtmyvQe+PQM1hpp7K22VAjsxXAGISN5zZoRoXmVzca+iRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07efd003-fb14-4bcc-8f3f-3f2f6459e42e",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "7e24ccd2-34fd-4289-9a78-1aae93623bae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0cf9bd0-2dfd-40a1-bdd8-e592140cedd4",
                            Email = "user5@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@MAIL.RU",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAELb0hQWP4T/JFCcAfLQkg+LCT6Dgsp8fcSAcV+CtlYRMDNsi+Pyerg9/yP02XTxDvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f591dacb-6664-48f0-8b82-da6123c9f1b2",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "757d5290-d036-4757-85ae-827b59e92cd3",
                            RoleId = "cc836c4d-a3dd-4434-92f3-f45a9ed19dd3"
                        },
                        new
                        {
                            UserId = "a0d74199-2ad5-4d2f-a184-eb52f5bf9094",
                            RoleId = "c373fe1b-9e38-498b-9729-6c719222b00d"
                        },
                        new
                        {
                            UserId = "64dbb199-0a95-4f1a-afcf-10cc827fd3c8",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        },
                        new
                        {
                            UserId = "54b1ff98-6b5f-4c5e-97a9-747095e1f5dc",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        },
                        new
                        {
                            UserId = "c191e5f8-bf5b-40a9-9ab6-4d08704e373b",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        },
                        new
                        {
                            UserId = "09c529c8-e798-44ac-9eac-e0150182fa4c",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        },
                        new
                        {
                            UserId = "7e24ccd2-34fd-4289-9a78-1aae93623bae",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sev1.Accounts.Domain.FavoriteAdvertisement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdvertisementId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("FavoriteAdvertisement");
                });

            modelBuilder.Entity("Sev1.Accounts.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DomainUsers");

                    b.HasData(
                        new
                        {
                            Id = "757d5290-d036-4757-85ae-827b59e92cd3",
                            Address = "299011 г. Севастополь, ул. Чехова, 1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Administrator",
                            IsDeleted = false,
                            LastName = "Administrator",
                            MiddleName = "Administrator",
                            PhoneNumber = "+79787713935",
                            RegionId = 1,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "a0d74199-2ad5-4d2f-a184-eb52f5bf9094",
                            Address = "299011 г. Севастополь, ул. Гоголя, 1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Moderator",
                            IsDeleted = false,
                            LastName = "Moderator",
                            MiddleName = "Moderator",
                            PhoneNumber = "+79787713935",
                            RegionId = 1,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = "64dbb199-0a95-4f1a-afcf-10cc827fd3c8",
                            Address = "299411 г. Москва, ул. Тургенева, 1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Александр",
                            IsDeleted = false,
                            LastName = "Викторович",
                            MiddleName = "Булгаков",
                            PhoneNumber = "+79787713931",
                            RegionId = 1,
                            UserName = "alex_1"
                        },
                        new
                        {
                            Id = "54b1ff98-6b5f-4c5e-97a9-747095e1f5dc",
                            Address = "299812 г. Судак, ул. Сергеева, 2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Роман",
                            IsDeleted = false,
                            LastName = "Сидоров",
                            MiddleName = "Олегович",
                            PhoneNumber = "+79787713932",
                            RegionId = 2,
                            UserName = "sidorov_2"
                        },
                        new
                        {
                            Id = "c191e5f8-bf5b-40a9-9ab6-4d08704e373b",
                            Address = "299713 г. Керчь, ул. Куприна, 3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Иван",
                            IsDeleted = false,
                            LastName = "Иванов",
                            MiddleName = "Иванович",
                            PhoneNumber = "+79787713933",
                            RegionId = 3,
                            UserName = "ivanov_3"
                        },
                        new
                        {
                            Id = "09c529c8-e798-44ac-9eac-e0150182fa4c",
                            Address = "299314 г. Симферополь, ул. Чернышевского, 4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Василий",
                            IsDeleted = false,
                            LastName = "Максимов",
                            MiddleName = "Андреевич",
                            PhoneNumber = "+79485733234",
                            RegionId = 4,
                            UserName = "vas_andr_4"
                        },
                        new
                        {
                            Id = "7e24ccd2-34fd-4289-9a78-1aae93623bae",
                            Address = "299415 г. Ялта, ул. Достоевского, 5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Пётр",
                            IsDeleted = false,
                            LastName = "Иванов",
                            MiddleName = "Сергеевич",
                            PhoneNumber = "+79687416935",
                            RegionId = 5,
                            UserName = "petr_ivanov_5"
                        });
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<string>("FriendUsersId")
                        .HasColumnType("text");

                    b.Property<string>("IgnoredUsersId")
                        .HasColumnType("text");

                    b.HasKey("FriendUsersId", "IgnoredUsersId");

                    b.HasIndex("IgnoredUsersId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("FavoriteAdvertisementUser", b =>
                {
                    b.HasOne("Sev1.Accounts.Domain.FavoriteAdvertisement", null)
                        .WithMany()
                        .HasForeignKey("FavoriteAdvertisementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sev1.Accounts.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("Sev1.Accounts.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("FriendUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sev1.Accounts.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("IgnoredUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
