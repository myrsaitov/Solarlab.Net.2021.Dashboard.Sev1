// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sev1.Accounts.DataAccess;

namespace Accounts.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FavoriteAdvertisementUser", b =>
                {
                    b.Property<string>("FavoriteAdvertisementsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteAdvertisementsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FavoriteAdvertisementUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "cc836c4d-a3dd-4434-92f3-f45a9ed19dd3",
                            ConcurrencyStamp = "4014a1c4-4901-445c-b860-414c501e8d9b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c373fe1b-9e38-498b-9729-6c719222b00d",
                            ConcurrencyStamp = "70f55f5f-8976-4823-a60d-ae6c6c048c02",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "589a1f42-d43c-4315-8e02-432f64e02bc0",
                            ConcurrencyStamp = "61dc20cb-d0fc-403f-a65e-622295a85625",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "757d5290-d036-4757-85ae-827b59e92cd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fb35cec-8188-410f-b1f7-6f4054d0f2e4",
                            Email = "administrator@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@MAIL.RU",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEOY+nDEs47wEqSuu5eP6Q2YTZkZ8bmC4hfIWg42tPthr4157euv0duJB0utE/SJI6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a86553e-4025-4c27-997b-97e1c34ff446",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "a0d74199-2ad5-4d2f-a184-eb52f5bf9094",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5296d0d-d103-400f-a1d0-31dcbeb35bc1",
                            Email = "moderator@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@MAIL.RU",
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAENn6A7JFFAccNitm3k6SKLjufOExPZL10xUThp0VgMG+ce12Osmat1gO/KEN3ASY5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d4bbcc8-f82f-480f-b78e-8b12a6c8804f",
                            TwoFactorEnabled = false,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = "64dbb199-0a95-4f1a-afcf-10cc827fd3c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c8490d4-5b4e-49b8-9281-d93054a754e4",
                            Email = "user1@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@MAIL.RU",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7OUJwY+QJc1YDITj6Y44cfTcoNx4EJjJJ7+GDMOdy+pC41UjkkLif3wZrbs+ewkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "691bfd0e-5a73-42d9-a24d-9d314c6ad174",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "54b1ff98-6b5f-4c5e-97a9-747095e1f5dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca86a7b8-b85c-4212-998f-bf729c6a7263",
                            Email = "user2@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@MAIL.RU",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEOx8wlRm2FWTbPl4ojk+jmk8hnKwpXdH/H121gL/HLgqfIn9Ui6nHF2Ksf4BvER7Wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "024fac35-0f6e-4bae-867c-f19e6924b548",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "c191e5f8-bf5b-40a9-9ab6-4d08704e373b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a3a245d-8f59-41b3-beb9-c5dfd642a302",
                            Email = "user3@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@MAIL.RU",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEDyKwykgNQDr5ejmewG5yDl6rdW8NjVDg3gKHKrcVr60cIboKuahFbrFHTMqC/ixgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b4030ef-c247-4672-95a3-584de8798d7a",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "09c529c8-e798-44ac-9eac-e0150182fa4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fa79519-2b1e-4e63-9263-eaa4c9acd881",
                            Email = "user4@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@MAIL.RU",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEBc1NdNDZkdfFB8GWZ69GtkaEdoqzlY8E/oX8IIo/wvLGCnwJ5KlPnMrtKnjUcMCmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bda7ff2f-85a8-4e55-a9ec-dfb0a5f4993f",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "7e24ccd2-34fd-4289-9a78-1aae93623bae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca065898-16ca-4791-9d4c-f62522d6daa1",
                            Email = "user5@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@MAIL.RU",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAELUd9ojI1GopRsMcx31pPt1iRAoH6Q9Nx2XN+T4oxy93bBgFGWETaOzm7swldITDbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5b7d888-ec13-4914-961e-bce7af54ab6f",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "757d5290-d036-4757-85ae-827b59e92cd3",
                            RoleId = "cc836c4d-a3dd-4434-92f3-f45a9ed19dd3"
                        },
                        new
                        {
                            UserId = "a0d74199-2ad5-4d2f-a184-eb52f5bf9094",
                            RoleId = "c373fe1b-9e38-498b-9729-6c719222b00d"
                        },
                        new
                        {
                            UserId = "64dbb199-0a95-4f1a-afcf-10cc827fd3c8",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        },
                        new
                        {
                            UserId = "54b1ff98-6b5f-4c5e-97a9-747095e1f5dc",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        },
                        new
                        {
                            UserId = "c191e5f8-bf5b-40a9-9ab6-4d08704e373b",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        },
                        new
                        {
                            UserId = "09c529c8-e798-44ac-9eac-e0150182fa4c",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        },
                        new
                        {
                            UserId = "7e24ccd2-34fd-4289-9a78-1aae93623bae",
                            RoleId = "589a1f42-d43c-4315-8e02-432f64e02bc0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sev1.Accounts.Domain.FavoriteAdvertisement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdvertisementId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FavoriteAdvertisement");
                });

            modelBuilder.Entity("Sev1.Accounts.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DomainUsers");

                    b.HasData(
                        new
                        {
                            Id = "757d5290-d036-4757-85ae-827b59e92cd3",
                            Address = "299011 г. Севастополь, ул. Чехова, 1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Administrator",
                            IsDeleted = false,
                            LastName = "Administrator",
                            MiddleName = "Administrator",
                            PhoneNumber = "+79787713935",
                            RegionId = 1,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "a0d74199-2ad5-4d2f-a184-eb52f5bf9094",
                            Address = "299011 г. Севастополь, ул. Гоголя, 1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Moderator",
                            IsDeleted = false,
                            LastName = "Moderator",
                            MiddleName = "Moderator",
                            PhoneNumber = "+79787713935",
                            RegionId = 1,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = "64dbb199-0a95-4f1a-afcf-10cc827fd3c8",
                            Address = "299411 г. Москва, ул. Тургенева, 1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Александр",
                            IsDeleted = false,
                            LastName = "Викторович",
                            MiddleName = "Булгаков",
                            PhoneNumber = "+79787713931",
                            RegionId = 1,
                            UserName = "alex_1"
                        },
                        new
                        {
                            Id = "54b1ff98-6b5f-4c5e-97a9-747095e1f5dc",
                            Address = "299812 г. Судак, ул. Сергеева, 2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Роман",
                            IsDeleted = false,
                            LastName = "Сидоров",
                            MiddleName = "Олегович",
                            PhoneNumber = "+79787713932",
                            RegionId = 2,
                            UserName = "sidor2"
                        },
                        new
                        {
                            Id = "c191e5f8-bf5b-40a9-9ab6-4d08704e373b",
                            Address = "299713 г. Керчь, ул. Куприна, 3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Иван",
                            IsDeleted = false,
                            LastName = "Иванов",
                            MiddleName = "Иванович",
                            PhoneNumber = "+79787713933",
                            RegionId = 3,
                            UserName = "ivanov3"
                        },
                        new
                        {
                            Id = "09c529c8-e798-44ac-9eac-e0150182fa4c",
                            Address = "299314 г. Симферополь, ул. Чернышевского, 4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Василий",
                            IsDeleted = false,
                            LastName = "Максимов",
                            MiddleName = "Андреевич",
                            PhoneNumber = "+79485733234",
                            RegionId = 4,
                            UserName = "vas_andr_4"
                        },
                        new
                        {
                            Id = "7e24ccd2-34fd-4289-9a78-1aae93623bae",
                            Address = "299415 г. Ялта, ул. Достоевского, 5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Пётр",
                            IsDeleted = false,
                            LastName = "Иванов",
                            MiddleName = "Сергеевич",
                            PhoneNumber = "+79687416935",
                            RegionId = 5,
                            UserName = "petr_ivanov_5"
                        });
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<string>("FriendUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IgnoredUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FriendUsersId", "IgnoredUsersId");

                    b.HasIndex("IgnoredUsersId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("FavoriteAdvertisementUser", b =>
                {
                    b.HasOne("Sev1.Accounts.Domain.FavoriteAdvertisement", null)
                        .WithMany()
                        .HasForeignKey("FavoriteAdvertisementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sev1.Accounts.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("Sev1.Accounts.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("FriendUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sev1.Accounts.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("IgnoredUsersId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
